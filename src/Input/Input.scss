@import '../common.scss';
@import './InputMixins.scss';
@import '../typography-helpers.scss';

$gap: 6px;
$double-gap: 12px;

.root {
  position: relative;
  display: flex;
  align-items: center;
  border: solid 1px;
  border-radius: 6px;
  @include BoxSizing();
  @include FontRoman();
  &.readOnly {
    border: solid 1px $D60;
    background-color: $D70;
    @include ThemeHover($backgroundColor: $B50);
  }

  @include ThemeDefault(
    $color: $D10,
    $borderColor: $B30,
    $backgroundColor: $D80
  );
  @include ThemeHover($backgroundColor: $B50);
  @include ThemeFocus($borderColor: $B10, $boxShadow: 0 0 0 3px $F00);
  @include ThemeError($borderColor: $paletteR1);
  @include ThemeWarning($borderColor: $paletteR5);
  @include ThemeDisable(
    $borderColor: $D10-20,
    $backgroundColor: $D80,
    $color: $D10-30
  );
}

.input-wrapper {
  display: flex;
  width: 100%;
  padding: 0 $gap;
}

.size-large {
  .input-wrapper {
    padding: 0 $double-gap;
    .input {
      padding: 18px $gap;
    }
  }
  &.roundInput {
    .menu-arrow {
      padding: 0 $double-gap 0 $gap;
    }
  }
}

.input {
  flex-grow: 1;
  flex-shrink: 1;
  min-width: 24px;
  padding: $gap;
  margin: 0;
  border: 0;
  outline: 0;
  line-height: 1.5;
  background: transparent;
  box-shadow: none;
  @include BorderRadius(6px);
  @include FontRoman();
  @include Placeholder($D40);
  @include Selection($paletteB4);

  &[type='number'] {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }

  &.disabled {
    @include Placeholder($D10-30);
  }
}

// Remove IE10+ automatically x button
.input::-ms-clear {
  display: none;
}

// remove safari autofill icon
.input::-webkit-contacts-auto-fill-button {
  display: none !important;
}

.suffixes {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  flex-grow: 0;
  min-width: 0;
  user-select: none !important;
  height: 100%;
}

.suffix {
  height: 100%;
  display: flex;
  align-items: center;
}

.roundInput {
  // `medium` is the new `normal` by Zeplin. For now supporting both
  &.size-normal,
  &.size-medium {
    @include BorderRadius(18px);
  }
  &.size-small {
    @include BorderRadius(15px);
    .menu-arrow {
      padding: 0 $gap;
    }
  }
  &.size-large {
    @include BorderRadius(30px);
  }
}

.noRightBorderRadius {
  border-bottom-right-radius: 0 !important;
  border-top-right-radius: 0 !important;
}

.noLeftBorderRadius {
  border-bottom-left-radius: 0 !important;
  border-top-left-radius: 0 !important;
}

.size {
  &-small {
    @include Size($height: 30px, $fontSize: 14px);
  }
  &-small-with-selection {
    @include Size($height: 28px, $fontSize: 14px);
  }
  // `medium` is the new `normal` by Zeplin. For now supporting both
  &-normal,
  &-medium {
    @include Size($height: 36px, $fontSize: 16px);
  }
  // `medium` is the new `normal` by Zeplin. For now supporting both
  &-normal-with-selection,
  &-medium-with-selection {
    @include Size($height: 34px, $fontSize: 16px);
  }
  &-large {
    @include Size($height: 60px, $fontSize: 16px);
  }
  &-large-with-selection {
    @include Size($height: 58px, $fontSize: 16px);
  }
}

// RTL layout based on global style set on document body or parent element.
@include withRTL() {
  .root,
  .input-wrapper,
  .suffixes {
    direction: rtl;
  }
  .input {
    direction: rtl;
  }
  .roundInput {
    .menu-arrow {
      padding: 0 $gap 0 $double-gap;
    }
    &.size-small {
      .menu-arrow {
        padding: 0 $gap;
      }
    }
  }
}

// RTL layout based on a property passed directly to the component.
.rtl.root {
  direction: rtl;
  .suffixes {
    direction: rtl;
  }
  .input {
    direction: rtl;
  }
  &.roundInput {
    .menu-arrow {
      padding: 0 $gap 0 $double-gap;
    }
    &.size-small {
      .menu-arrow {
        padding: 0 $gap;
      }
    }
  }
}

.clear-button {
  line-height: 0;
  background: $B50;
  border-radius: 12px;
}

.menu-arrow {
  display: flex;
  align-items: center;
  height: 100%;
  padding: 0 $gap;
  margin-top: 1px;
  path {
    fill: $B10;
  }

  &[disabled] {
    path {
      fill: $D10-30;
    }
  }
}

.roundInput .menu-arrow {
  padding: 0 $double-gap 0 $gap;
}
